<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My New Hugo Site</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 03 Dec 2024 11:52:29 -0500</lastBuildDate><atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" /><item>
      <title>Running Python Files: Module vs Script</title>
      <link>http://localhost:1313/posts/run-as-module/</link>
      <pubDate>Tue, 03 Dec 2024 11:52:29 -0500</pubDate>
      
      <guid>http://localhost:1313/posts/run-as-module/</guid>
      <description>Introduction In Python, a file can be run either as a script or as a module. Understanding the difference between these two approaches is crucial for proper code organization and execution. Let&amp;rsquo;s explore both methods and their use cases.
Running as a Script vs Module Script Execution When you run a Python file directly, it&amp;rsquo;s executed as a script:
# Running directly from command line python script.py Module Execution When you import a file as a module into another Python file:</description>
    </item>
    
    <item>
      <title>Code Format Checking Tools</title>
      <link>http://localhost:1313/posts/code-format-checking-tools/</link>
      <pubDate>Tue, 03 Dec 2024 11:41:17 -0500</pubDate>
      
      <guid>http://localhost:1313/posts/code-format-checking-tools/</guid>
      <description>Flake8 vs Autopep8 Flake8 Purpose: Code linting tool Function: Checks if code follows PEP 8 style guide Detects syntax errors Reports code style issues Key Features: Only identifies and reports issues Does not modify code Combines multiple tools: PyFlakes (Python code error checking) pycodestyle (style checking) McCabe (code complexity checking) Autopep8 Purpose: Code formatting tool Function: Automatically fixes code style issues Makes code PEP 8 compliant Key Features: Automatically modifies code Focuses on formatting issues Can fix most formatting issues reported by flake8 Relationship Complementary Tools: ```bash</description>
    </item>
    
    <item>
      <title>SessionStorage vs LocalStorage</title>
      <link>http://localhost:1313/posts/front-end-storage/</link>
      <pubDate>Tue, 03 Dec 2024 11:41:17 -0500</pubDate>
      
      <guid>http://localhost:1313/posts/front-end-storage/</guid>
      <description>Introduction Web Storage is a crucial feature in modern web development that allows websites to store data directly in the user&amp;rsquo;s browser. The two main mechanisms for this are SessionStorage and LocalStorage. Let&amp;rsquo;s explore their differences and use cases.
Key Differences 1. Data Persistence LocalStorage:
Data persists until explicitly cleared Survives browser restarts and OS reboots No automatic expiration SessionStorage:
Data persists only for the duration of the browser session Cleared when the browser tab is closed Each tab/window has its own separate storage 2.</description>
    </item>
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
  </channel>
</rss>
